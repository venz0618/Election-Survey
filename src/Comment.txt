// VoteResult Commnents
//-----------------------------------------
  // Load initial data and options
  // useEffect(() => {
  //   const fetchInitialData = async () => {
  //     try {
  //       // Fetch regions
  //       const regionsRes = await axiosInstance.get('/region');
  //       setOptions(prev => ({ ...prev, regions: regionsRes.data }));
    

  //       // Fetch initial results
  //       const resultsRes = await axiosInstance.get('/results');
  //       setResults(resultsRes.data);
        
  //       setIsLoading(false);
  //     } catch (error) {
  //       console.error('Error fetching initial data:', error);
  //       setIsLoading(false);
  //     }
  //   };

  //   fetchInitialData();

  //   // Set up polling for updates every 5 seconds
  //   const interval = setInterval(fetchInitialData, 5000);
  //   return () => clearInterval(interval);
  // }, []);



  useEffect(() => {
    const fetchVoteResults = async () => {
      setIsLoading(true);
      try {
        const response = await axiosInstance.get("/results");
        const candidateData = response.data.total_votes_per_candidate || [];

        
  
        setCandidateTotals(candidateData);
  
        // Prepare chart data
        const labels = candidateData.map((c) => c.candidate_name);
        const data = candidateData.map((c) => c.total_votes);
  
        setChartData({
          labels,
          datasets: [
            {
              label: "Total Votes",
              data,
              backgroundColor: labels.map(
                () => `#${Math.floor(Math.random() * 16777215).toString(16).padStart(6, "0")}`
              ),
            },
          ],
        });

      } catch (error) {
        console.error("Error fetching vote results:", error);
      } finally {
        setIsLoading(false);
      }
    };
  
    fetchVoteResults();
    const interval = setInterval(fetchVoteResults, 5000); // Polling every 5 seconds
    return () => clearInterval(interval);
  }, []);

  

  // useEffect(() => {
  //   fetch('http://127.0.0.1:8000/api/results')
  //     .then(response => response.json())
  //     .then(data => {
  //       if (data.total_votes_per_candidate) {
  //         setCandidateTotals(data.total_votes_per_candidate); // Set the correct array
  //       } else {
  //         setCandidateTotals([]); // Ensure an empty array to prevent mapping errors
  //       }
  //     })
  //     .catch(error => console.error('Error fetching results:', error));
  // }, []);

    // const fetchFilteredResults = async (currentFilters) => {
  //   try {
  //     // Build query params from non-empty filters
  //     const params = {};
  //     Object.entries(currentFilters).forEach(([key, value]) => {
  //       if (value) params[key] = value;
  //     });

  //     const res = await axiosInstance.get('/results', { params });
  //     setResults(res.data);
  //   } catch (error) {
  //     console.error('Error fetching filtered results:', error);
  //   }
  // };


  // this my whole code just add that features.
// import React, { useState, useEffect } from 'react';
// import axiosInstance from "../../utils/axiosInstance";
// import { Bar } from 'react-chartjs-2';
// import {
//   Chart as ChartJS,
//   CategoryScale,
//   LinearScale,
//   BarElement,
//   Title,
//   Tooltip,
//   Legend,
// } from 'chart.js';

// // Register ChartJS components
// ChartJS.register(
//   CategoryScale,
//   LinearScale,
//   BarElement,
//   Title,
//   Tooltip,
//   Legend
// );

// const VoteResult = () => {

  
//   // State for filters
//   const [filters, setFilters] = useState({
//     region: '',
//     province: '',
//     city: '',
//     barangay: '',
//     clusteredPrecinct: '',
//     precinctNumber: ''
//   });


  
  

//   // State for available options
//   const [options, setOptions] = useState({
//     regions: [],
//     provinces: [],
//     cities: [],
//     barangays: [],
//     clusteredPrecincts: [],
//     precinctNumbers: []
//   });

//   // State for results
//   const [results, setResults] = useState([]);
//   const [isLoading, setIsLoading] = useState(true);
//   const [candidateTotals, setCandidateTotals] = useState({});
//   const [chartData, setChartData] = useState(null);

//   // Calculate candidate totals whenever results change
//   useEffect(() => {
//     const totals = {};
//     results.forEach(result => {
//         Object.entries(result.candidates).forEach(([candidate, votes]) => {
//             totals[candidate] = (totals[candidate] || 0) + votes;
//         });
//     });
//     setCandidateTotals(totals);

//     // Prepare chart data
//     if (Object.keys(totals).length > 0) {
//         setChartData({
//             labels: Object.keys(totals),
//             datasets: [{
//                 label: 'Total Votes',
//                 data: Object.values(totals),
//                 backgroundColor: Object.keys(totals).map(() =>
//                     `#${Math.floor(Math.random()*16777215).toString(16)}`
//                 ),
//             }]
//         });
//     }
// }, [results]);

// // âœ… Define total before using it
// const totalVotes = Object.values(candidateTotals).reduce((a, b) => a + b, 0);

//   // Load initial data and options
//   useEffect(() => {
//     const fetchInitialData = async () => {
//       try {
//         // Fetch regions
//         const regionsRes = await axiosInstance.get('/region');
//         setOptions(prev => ({ ...prev, regions: regionsRes.data }));
//         // if (filterType === 'region') {
//         //   setOptions(prev => ({ ...prev, provinces: res.data }));
//         // } else if (filterType === 'province') {
//         //   setOptions(prev => ({ ...prev, cities: res.data }));
//         // } else if (filterType === 'city') {
//         //   setOptions(prev => ({ ...prev, barangays: res.data }));
//         // } else if (filterType === 'barangay') {
//         //   setOptions(prev => ({ ...prev, clusteredPrecincts: res.data }));
//         // } else if (filterType === 'clusteredPrecinct') {
//         //   setOptions(prev => ({ ...prev, precinctNumbers: res.data }));
//         // }
        

//         // Fetch initial results
//         const resultsRes = await axiosInstance.get('/results');
//         setResults(resultsRes.data);
        
//         setIsLoading(false);
//       } catch (error) {
//         console.error('Error fetching initial data:', error);
//         setIsLoading(false);
//       }
//     };

//     fetchInitialData();

//     // Set up polling for updates every 5 seconds
//     const interval = setInterval(fetchInitialData, 5000);
//     return () => clearInterval(interval);
//   }, []);

//   useEffect(() => {
//     fetch('http://127.0.0.1:8000/api/results')
//       .then(response => response.json())
//       .then(data => {
//         if (data.total_votes_per_candidate) {
//           setCandidateTotals(data.total_votes_per_candidate); // Set the correct array
//         } else {
//           setCandidateTotals([]); // Ensure an empty array to prevent mapping errors
//         }
//       })
//       .catch(error => console.error('Error fetching results:', error));
//   }, []);
  

//   // Handle filter changes
//   const handleFilterChange = async (filterType, value) => {
//     const newFilters = { ...filters, [filterType]: value };
    
//     // Reset downstream filters
//     const resetFilters = {
//       region: ['province', 'city', 'barangay', 'clusteredPrecinct', 'precinctNumber'],
//       province: ['city', 'barangay', 'clusteredPrecinct', 'precinctNumber'],
//       city: ['barangay', 'clusteredPrecinct', 'precinctNumber'],
//       barangay: ['clusteredPrecinct', 'precinctNumber'],
//       clusteredPrecinct: ['precinctNumber']
//     };

//     if (resetFilters[filterType]) {
//       resetFilters[filterType].forEach(f => newFilters[f] = '');
//     }

//     setFilters(newFilters);

//     // Fetch options for the next level filter
//     const endpoints = {
//       region: '/provinces',
//       province: '/cities',
//       city: '/barangays',
//       barangay: '/clustered-precincts',
//       clusteredPrecinct: '/precinct-numbers'
//     };

//     if (endpoints[filterType] && value) {
//       try {
//         const res = await axiosInstance.get(`${endpoints[filterType]}?parent=${value}`);
//         setOptions(prev => ({ 
//           ...prev, 
//           [`${filterType}s`]: res.data 
//         }));
//       } catch (error) {
//         console.error(`Error fetching ${filterType} options:`, error);
//       }
//     }

//     // Fetch filtered results
//     fetchFilteredResults(newFilters);
//   };

//   const fetchFilteredResults = async (currentFilters) => {
//     try {
//       // Build query params from non-empty filters
//       const params = {};
//       Object.entries(currentFilters).forEach(([key, value]) => {
//         if (value) params[key] = value;
//       });

//       const res = await axiosInstance.get('/results', { params });
//       setResults(res.data);
//     } catch (error) {
//       console.error('Error fetching filtered results:', error);
//     }
//   };

//   if (isLoading) {
//     return (
//       <div className="flex justify-center items-center h-screen">
//         <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
//       </div>
//     );
//   }

//   return (
//     <div className="container mx-auto px-4 py-8">
//       <h1 className="text-3xl font-bold text-gray-800 mb-6">Vote Results Dashboard</h1>
      
//       {/* Filter Controls */}
//       <div className="bg-white p-6 rounded-lg shadow-md mb-8">
//         <h2 className="text-xl font-semibold mb-4">Filters</h2>
//         <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
//           <div className="space-y-1">
//             <label className="block text-sm font-medium text-gray-700">Region</label>
//             <select
//               className="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
//               value={filters.region}
//               onChange={(e) => handleFilterChange('region', e.target.value)}
//             >
//               <option value="">All Regions</option>
//               {options.regions.map(region => (
//                 <option key={region.id} value={region.id}>{region.region_name}</option>
//               ))}
//             </select>
//           </div>

//           <div className="space-y-1">
//             <label className="block text-sm font-medium text-gray-700">Province</label>
//             <select
//               className="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50"
//               value={filters.province}
//               onChange={(e) => handleFilterChange('province', e.target.value)}
//               disabled={!filters.region}
//             >
//               <option value="">All Provinces</option>
//               {options.provinces.map(province => (
//                 <option key={province.id} value={province.id}>{province.province_name}</option>
//               ))}
//             </select>
//           </div>

//           <div className="space-y-1">
//             <label className="block text-sm font-medium text-gray-700">City/Municipality</label>
//             <select
//               className="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50"
//               value={filters.city}
//               onChange={(e) => handleFilterChange('city', e.target.value)}
//               disabled={!filters.province}
//             >
//               <option value="">All Cities</option>
//               {options.cities.map(city => (
//                 <option key={city.id} value={city.id}>{city.city_name}</option>
//               ))}
//             </select>
//           </div>

//           <div className="space-y-1">
//             <label className="block text-sm font-medium text-gray-700">Barangay</label>
//             <select
//               className="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50"
//               value={filters.barangay}
//               onChange={(e) => handleFilterChange('barangay', e.target.value)}
//               disabled={!filters.city}
//             >
//               <option value="">All Barangays</option>
//               {options.barangays.map(barangay => (
//                 <option key={barangay.id} value={barangay.id}>{barangay.barangay_name}</option>
//               ))}
//             </select>
//           </div>

//           <div className="space-y-1">
//             <label className="block text-sm font-medium text-gray-700">Clustered Precinct</label>
//             <select
//               className="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50"
//               value={filters.clusteredPrecinct}
//               onChange={(e) => handleFilterChange('clusteredPrecinct', e.target.value)}
//               disabled={!filters.barangay}
//             >
//               <option value="">All Precincts</option>
//               {options.clusteredPrecincts.map(precinct => (
//                 <option key={precinct.id} value={precinct.id}>{precinct.clustered_precinct_num}</option>
//               ))}
//             </select>
//           </div>

//           <div className="space-y-1">
//             <label className="block text-sm font-medium text-gray-700">Precinct Number</label>
//             <select
//               className="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50"
//               value={filters.precinctNumber}
//               onChange={(e) => handleFilterChange('precinctNumber', e.target.value)}
//               disabled={!filters.clusteredPrecinct}
//             >
//               <option value="">All Numbers</option>
//               {options.precinctNumbers.map(number => (
//                 <option key={number.id} value={number.id}>{number.precinct_num}</option>
//               ))}
//             </select>
//           </div>
//         </div>
//       </div>

//       {/* Candidate Totals Display */}
//       <div className="bg-white p-6 rounded-lg shadow-md mb-8">
//         <h2 className="text-xl font-semibold mb-4">Candidate Vote Totals</h2>
//         <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
//         <p className="text-sm text-gray-500">
//   {Object.values(candidateTotals).reduce((a, b) => a + b, 0) > 0
//     ? Math.round((totalVotes / Object.values(candidateTotals).reduce((a, b) => a + b, 0)) * 100)
//     : 0}% of total
// </p>

//         </div>
//       </div>

//       {/* Results Chart */}
//       <div className="bg-white p-6 rounded-lg shadow-md mb-8">
//         <h2 className="text-xl font-semibold mb-4">Vote Distribution</h2>
//         {chartData && (
//           <div className="h-96">
//             <Bar
//               data={chartData}
//               options={{
//                 responsive: true,
//                 maintainAspectRatio: false,
//                 plugins: {
//                   title: {
//                     display: true,
//                     text: 'Vote Totals by Candidate',
//                   },
//                 },
//               }}
//             />
//           </div>
//         )}
//       </div>

//       {/* Results Table */}
//       <div className="bg-white p-6 rounded-lg shadow-md">
//         <h2 className="text-xl font-semibold mb-4">Detailed Results</h2>
//         <div className="overflow-x-auto">
//           <table className="min-w-full divide-y divide-gray-200">
//             <thead className="bg-gray-50">
//               <tr>
//                 <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Region</th>
//                 <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Precinct</th>
//                 {Object.keys(candidateTotals).map(candidate => (
//                   <th key={candidate} className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
//                     {candidate}
//                   </th>
//                 ))}
//                 <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Total</th>
//               </tr>
//             </thead>
//             <tbody className="bg-white divide-y divide-gray-200">
//               {candidateTotals.map((candidate, index) => (
//                 <tr key={index} className="hover:bg-gray-50">
//                   <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{candidate.region}</td>
//                   <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{candidate.precinctNumber}</td>
//                   {Object.keys(candidate).map(candidate => (
//                     <td key={candidate} className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
//                       {candidate.candidates[candidate] || 0}
//                     </td>
//                   ))}
//                   <td className="px-6 py-4 whitespace-nowrap text-sm font-semibold text-gray-900">
//                     {Object.values(candidate.candidates).reduce((a, b) => a + b, 0)}
//                   </td>
//                 </tr>
//               ))}
//             </tbody>
//           </table>
//         </div>
//       </div>
//     </div>
//   );
// };

// export default VoteResult;]

import React, { useState, useEffect } from 'react';
import axiosInstance from "../../utils/axiosInstance";
import { Bar } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
} from 'chart.js';

// Register ChartJS components
ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend
);


const VoteResult = () => {

  
  // State for filters
  const [filters, setFilters] = useState({
    region: '',
    province: '',
    city: '',
    barangay: '',
    clusteredPrecinct: '',
    precinctNumber: ''
  });


  const [stats, setStats] = useState({ total_voters: 0 });
  

  // State for available options
  const [options, setOptions] = useState({
    regions: [],
    provinces: [],
    cities: [],
    barangays: [],
    clusteredPrecincts: [],
    precinctNumbers: []
  });



  useEffect(() => {
    const fetchStats = async () => {
        try {
            const response = await axiosInstance.get("/dashboard-stats", {
                headers: { Authorization: `Bearer ${localStorage.getItem("token")}` },
            });
            setStats(response.data);
        } catch (error) {
            console.error("Error fetching stats:", error);
        }
    };
    fetchStats();
}, []);
  // State for results
    const [results, setResults] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [candidateTotals, setCandidateTotals] = useState([]);
  const [chartData, setChartData] = useState(null);

  // Calculate candidate totals whenever results change
  const fetchData = async () => {
    setIsLoading(true);
    try {
      // Fetch regions and set options
      const regionsRes = await axiosInstance.get('/region');
      setOptions((prev) => ({ ...prev, regions: regionsRes.data }));

      // Fetch vote results and candidate data
      const resultsRes = await axiosInstance.get('/results');
      
      // Update results state
      setResults(resultsRes.data);

      const candidateData = resultsRes.data.total_votes_per_candidate || [];
      setCandidateTotals(candidateData); // Update candidate totals

      // Prepare chart data
      const labels = candidateData.map((c) => c.candidate_name);
      const data = candidateData.map((c) => c.total_votes);
      const newChartData = {
        labels,
        datasets: [
          {
            label: "Total Votes",
            data,
            backgroundColor: labels.map(
              () => `#${Math.floor(Math.random() * 16777215).toString(16).padStart(6, "0")}`
            ),
          },
        ],
      };
      setChartData(newChartData); // Update chart data
    } catch (error) {
      console.error('Error fetching data:', error);
    } finally {
      setIsLoading(false);
    }
  };

  // Fetch data on initial load (one-time fetch when component mounts)
  useEffect(() => {
    fetchData(); // Initial fetch on mount
  }, []); // Empty dependency array means this only runs once when the component mounts

  

// âœ… Define total before using it
const totalVotes = candidateTotals.reduce((sum, candidate) => sum + candidate.total_votes, 0);
// const totalVotes = Object.values(candidateTotals).reduce((a, b) => a + b, 0);


  // Handle filter changes
  const handleFilterChange = async (filterType, value) => {
    const newFilters = { ...filters, [filterType]: value };
    
    // Reset downstream filters
    const resetFilters = {
      region: ['province', 'city', 'barangay', 'clusteredPrecinct', 'precinctNumber'],
      province: ['city', 'barangay', 'clusteredPrecinct', 'precinctNumber'],
      city: ['barangay', 'clusteredPrecinct', 'precinctNumber'],
      barangay: ['clusteredPrecinct', 'precinctNumber'],
      clusteredPrecinct: ['precinctNumber']
    };

    if (resetFilters[filterType]) {
      resetFilters[filterType].forEach(f => newFilters[f] = '');
    }

    setFilters(newFilters);

    // Fetch options for the next level filter
    const endpoints = {
      region: '/provinces',
      province: '/cities',
      city: '/barangays',
      barangay: '/clustered-precincts',
      clusteredPrecinct: '/precinct-numbers'
    };

    if (endpoints[filterType] && value) {
      try {
        const res = await axiosInstance.get(`${endpoints[filterType]}?parent=${value}`);
        setOptions(prev => ({ 
          ...prev, 
          [`${filterType}s`]: res.data 
        }));
      } catch (error) {
        console.error(`Error fetching ${filterType} options:`, error);
      }
    }

    // Fetch filtered results
    fetchFilteredResults(newFilters);
  };
  const fetchFilteredResults = async (currentFilters) => {
      try {
        // Build query params from non-empty filters
        const params = {};
        Object.entries(currentFilters).forEach(([key, value]) => {
          if (value) params[key] = value;
        });
  
        const res = await axiosInstance.get('/results', { params });
        setResults(res.data);
      } catch (error) {
        console.error('Error fetching filtered results:', error);
      }
    };
  

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold text-gray-800 mb-6">Vote Results Dashboard</h1>
      
      {/* Filter Controls */}
      <div className="bg-white p-6 rounded-lg shadow-md mb-8">
        <h2 className="text-xl font-semibold mb-4">Filters</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          <div className="space-y-1">
            <label className="block text-sm font-medium text-gray-700">Region</label>
            <select
              className="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              value={filters.region}
              onChange={(e) => handleFilterChange('region', e.target.value)}
            >
              <option value="">All Regions</option>
              {options.regions.map(region => (
                <option key={region.id} value={region.id}>{region.region_name}</option>
              ))}
            </select>
          </div>

          <div className="space-y-1">
            <label className="block text-sm font-medium text-gray-700">Province</label>
            <select
              className="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50"
              value={filters.province}
              onChange={(e) => handleFilterChange('province', e.target.value)}
              disabled={!filters.region}
            >
              <option value="">All Provinces</option>
              {options.provinces.map(province => (
                <option key={province.id} value={province.id}>{province.province_name}</option>
              ))}
            </select>
          </div>

          <div className="space-y-1">
            <label className="block text-sm font-medium text-gray-700">City/Municipality</label>
            <select
              className="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50"
              value={filters.city}
              onChange={(e) => handleFilterChange('city', e.target.value)}
              disabled={!filters.province}
            >
              <option value="">All Cities</option>
              {options.cities.map(city => (
                <option key={city.id} value={city.id}>{city.city_name}</option>
              ))}
            </select>
          </div>

          <div className="space-y-1">
            <label className="block text-sm font-medium text-gray-700">Barangay</label>
            <select
              className="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50"
              value={filters.barangay}
              onChange={(e) => handleFilterChange('barangay', e.target.value)}
              disabled={!filters.city}
            >
              <option value="">All Barangays</option>
              {options.barangays.map(barangay => (
                <option key={barangay.id} value={barangay.id}>{barangay.barangay_name}</option>
              ))}
            </select>
          </div>

          <div className="space-y-1">
            <label className="block text-sm font-medium text-gray-700">Clustered Precinct</label>
            <select
              className="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50"
              value={filters.clusteredPrecinct}
              onChange={(e) => handleFilterChange('clusteredPrecinct', e.target.value)}
              disabled={!filters.barangay}
            >
              <option value="">All Precincts</option>
              {options.clusteredPrecincts.map(precinct => (
                <option key={precinct.id} value={precinct.id}>{precinct.clustered_precinct_num}</option>
              ))}
            </select>
          </div>

          <div className="space-y-1">
            <label className="block text-sm font-medium text-gray-700">Precinct Number</label>
            <select
              className="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50"
              value={filters.precinctNumber}
              onChange={(e) => handleFilterChange('precinctNumber', e.target.value)}
              disabled={!filters.clusteredPrecinct}
            >
              <option value="">All Numbers</option>
              {options.precinctNumbers.map(number => (
                <option key={number.id} value={number.id}>{number.precinct_num}</option>
              ))}
            </select>
          </div>
        </div>
      </div>

     {/* Candidate Totals Display */}
     <div className="bg-white p-6 rounded-lg shadow-md mb-8">
        <h2 className="text-xl font-semibold mb-4">Candidate Vote Totals</h2>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          {candidateTotals.map((candidate, index) => (
            <div key={index} className="p-4 bg-gray-100 rounded-lg shadow-sm">
              <h3 className="text-lg font-semibold">{candidate.candidate_name}</h3>
              <p className="text-gray-600">{candidate.total_votes} votes</p>
              <p className="text-sm text-gray-500">
                {totalVotes > 0 ? ((candidate.total_votes / totalVotes) * 100).toFixed(2) : 0}%
              </p>
            </div>
          ))}
        </div>
      </div>

      {/* Results Chart */}
      <div className="bg-white p-6 rounded-lg shadow-md mb-8">
        <h2 className="text-xl font-semibold mb-4">Vote Distribution</h2>
        {chartData && (
          <div className="h-96">
            <Bar
              data={chartData}
              options={{
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                  title: {
                    display: true,
                    text: 'Vote Totals by Candidate',
                  },
                },
              }}
            />
          </div>
        )}
      </div>

      {/* Results Table */}
      <div className="bg-white p-6 rounded-lg shadow-md">
        <h2 className="text-xl font-semibold mb-4">Detailed Results</h2>
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Region</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Precinct</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Candidate Names</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Total Votes</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Percentage {stats.total_voters}</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {candidateTotals.map((candidate, index) => (
                <tr key={index} className="hover:bg-gray-50">
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{candidate.region}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{candidate.precinctNumber}</td>
                 
                  {Object.keys(candidate || {}).map(key => (
                      <td key={key} className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {candidate[key] || 0}
                      </td>
                    ))}
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {totalVotes > 0 ? ((candidate.total_votes / stats.total_voters) * 100).toFixed(2) : 0}%
                    
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
};

export default VoteResult;


    // const fetchPositions = async () => {
    //     try {
    //         const response = await axiosInstance.get("/positions");
    //         setPositions(response.data);
    //     } catch (error) {
    //         console.error("Error fetching positions:", error);
    //     }
    // };

    // const fetchCandidates = async (positionId) => {
    //     try {
    //         const response = await axiosInstance.get(`/candidates?position_id=${positionId}`);
    //         setCandidates(response.data);
    //     } catch (error) {
    //         console.error("Error fetching candidates:", error);
    //     }
    // };

      //
    // const handleCandidateSelection = (voterId, candidateId) => {
    //     setSelectedVotes((prev) => {
    //         const updatedVotes = { ...prev };
    //         if (!updatedVotes[voterId]) {
    //             updatedVotes[voterId] = [];
    //         }

    //         if (updatedVotes[voterId].includes(candidateId)) {
    //             updatedVotes[voterId] = updatedVotes[voterId].filter((id) => id !== candidateId);
    //         } else {
    //             updatedVotes[voterId].push(candidateId);
    //         }

    //         return updatedVotes;
    //     });
    // };
    // const handleSubmitVotes = async () => {
    //     try {
    //         const payload = Object.keys(selectedVotes).map((voterId) => ({
    //             voter_id: voterId,
    //             candidate_id: selectedVotes[voterId][0], // Since only one candidate per voter
    //             num_votes: 1, // Each voter can vote once
    //         }));
    
    //         const response = await axiosInstance.post("/submit-votes", { votes: payload });
    
    //         if (response.status === 200) {
    //             alert("Votes submitted successfully!");
    //             setSelectedVotes({}); // Reset selections after submission
    //         }
    //     } catch (error) {
    //         console.error("Error submitting votes:", error);
    //         alert("Failed to submit votes. Please try again.");
    //     }
    // };

    import React, { useState, useEffect } from "react";
import axiosInstance from "../../utils/axiosInstance";
import useFilters from "../../utils/useFilters";
import DataTable from "react-data-table-component";
import Swal from "sweetalert2"; // Import SweetAlert2


const Survey = () => {
    const [regions, setRegions] = useState([]);
    const [provinces, setProvinces] = useState([]);
    const [cities, setCities] = useState([]);
    const [barangays, setBarangays] = useState([]);
    const [clusteredPrecincts, setClusteredPrecincts] = useState([]);
    const [precinctNumbers, setPrecinctNumbers] = useState([]);
    const [voters, setVoters] = useState([]);
    const [searchQuery, setSearchQuery] = useState("");  // âœ… Add this line

    // select candidate and position
    const [positions, setPositions] = useState([]);
    const [candidates, setCandidates] = useState([]);
    const [selectedPosition, setSelectedPosition] = useState("");

    const [regionId, setRegionId] = useState("");
    const [provinceId, setProvinceId] = useState("");
    const [cityId, setCityId] = useState("");
    const [barangayId, setBarangayId] = useState("");
    const [precinctNumId, setPrecinctNumId] = useState("");
    const [clusteredPrecinctId, setClusteredPrecinctId] = useState("");
    const [selectedVotes, setSelectedVotes] = useState([]);
    const [votedVoters, setVotedVoters] = useState([]);


    const candidateColorMap = {
        1: "#3498db", // Candidate 1 - Blue
        2: "#2ecc71", // Candidate 2 - Green
        3: "#e74c3c", // Candidate 3 - Red
        4: "#f1c40f", // Candidate 4 - Yellow
        5: "#9b59b6", // Candidate 5 - Purple
    };
    


 

    useEffect(() => {
        // Fetch all positions
        axiosInstance.get("/positions").then((response) => {
            setPositions(response.data);
        });
    }, []);

    useEffect(() => {
        // Fetch candidates based on selected position
        if (selectedPosition) {
            axiosInstance
                .get(`/candidates-filter?position_id=${selectedPosition}`)
                .then((response) => {
                    setCandidates(response.data);
                });
        }
    }, [selectedPosition]); // Runs when selectedPosition changes

    useEffect(() => {
        axiosInstance.get("/voted-voters").then((response) => {
            setVotedVoters(response.data.votedVoters); // Assuming API returns a list of voted voter IDs
        });
    }, []);
    

    useEffect(() => {
        fetchRegions();
    }, []); // âœ… Only fetch once
    
    useEffect(() => {
        if (regionId) fetchProvince(regionId);
    }, [regionId]);
    
    useEffect(() => {
        if (provinceId) fetchCities(provinceId);
    }, [provinceId]);
    
    useEffect(() => {
        if (cityId) fetchBarangays(cityId);
    }, [cityId]);
    
    useEffect(() => {
        if (barangayId) fetchClusteredPrecincts(barangayId);
    }, [barangayId]);
    
    useEffect(() => {
        if (clusteredPrecinctId) fetchPrecincts(clusteredPrecinctId);
    }, [clusteredPrecinctId]);
    

    
    

    const fetchRegions = async () => {
        const cachedRegions = sessionStorage.getItem("regions");
    
        if (cachedRegions) {
            setRegions(JSON.parse(cachedRegions));
            return;
        }
    
        try {
            const response = await axiosInstance.get("/regions");
            setRegions(response.data);
            sessionStorage.setItem("regions", JSON.stringify(response.data)); // Save to cache
        } catch (error) {
            console.error("Error fetching regions:", error);
        }
    };
    
    

    const fetchProvince = async (regionId) => {
        if(!regionId) {
            setProvinces([]);
            return;
        }
        try {
            const response = await axiosInstance.get(`/provinces?region_id=${regionId}`);
            setProvinces(response.data);
        } catch (error){
            console.error("Error fetching provinces:", error);
        }
    };

    const fetchCities = async (provinceId) => {
        if(!provinceId){
            setCities([]);
            return;
        }
        try {
            const response = await axiosInstance.get(`cities?province_id=${provinceId}`);
            setCities(response.data);
        }catch (error){
            console.error("Error fetching cities:", error);
        }
    };

    const fetchBarangays = async (cityId) => {
        if (!cityId) {
            setBarangays([]); // Clear barangays if no city selected
            return;
        }
    
        try {
            const response = await axiosInstance.get(`/barangays?city_id=${cityId}`);
            setBarangays(response.data);
        } catch (error) {
            console.error("Error fetching barangays:", error);
        }
    };
    const fetchClusteredPrecincts = async (barangayId) => {
        if (!barangayId) {
            setClusteredPrecincts([]);
        }

        try{
            const response = await axiosInstance.get(`/clustered-precincts/${barangayId}`);
            setClusteredPrecincts(response.data);
        } catch(error){
            console.error("Error fetching clustered precinct:", error);
        }
    };

    const fetchPrecincts = async (clustered_precinct_id) => {
        if (!clustered_precinct_id) {
            console.warn("No clustered_precinct_id provided, skipping request.");
            return; // Exit function early to avoid 404 error
        }
    
        try {
            console.log("Fetching precincts for clustered_precinct_id:", clustered_precinct_id);
            const response = await axiosInstance.get(`/precincts?clustered_precinct_id=${clustered_precinct_id}`);
    
            if (Array.isArray(response.data)) {
                setPrecinctNumbers(response.data);
            } else {
                console.error("Invalid precinct data received:", response.data);
                setPrecinctNumbers([]);
            }
        } catch (error) {
            console.error("Error fetching precincts:", error);
            setPrecinctNumbers([]);
        }
    };

    
    
    const fetchVoters = async () => {
        const filters = {
            region_id: regionId || null,
            province_id: provinceId || null,
            city_id: cityId || null,
            barangay_id: barangayId || null,
            clustered_precinct_id: clusteredPrecinctId || null,
            precinct_num: precinctNumId || null, // Ensure 'precinct_num' matches Laravel API
        };
    
        console.log("Sending request with filters:", filters); // Debugging
    
        try {
            const response = await axiosInstance.get("/voters/filter", { params: filters });
            console.log("Response Data:", response.data); // Debugging
            setVoters(response.data);
        } catch (error) {
            console.error("Error fetching voters:", error.response?.data || error.message);
        }
    };


  
    const handleCandidateSelection = (voterId, candidateId) => {
        setSelectedVotes((prev) => ({
            ...prev,
            [voterId]: prev[voterId] === candidateId ? null : candidateId, // Toggle selection
        }));
    };
    
    

 
    const handleSubmitVotes = async () => {
        console.log("Submitting votes:", selectedVotes);
    
        if (Object.keys(selectedVotes).length === 0) {
            Swal.fire({
                icon: "warning",
                title: "No Votes Selected",
                text: "Please select a candidate before submitting.",
            });
            return;
        }
    
        const formattedVotes = Object.entries(selectedVotes).map(([voterId, candidateIds]) => ({
            voter_id: voterId,
            candidate_ids: Array.isArray(candidateIds) ? candidateIds : [candidateIds], // Ensure array
        }));
    
        console.log("Formatted Votes:", formattedVotes);
    
        try {
            const response = await axiosInstance.post("/submit-votes", { votes: formattedVotes });
    
            if (response.status === 200) {
                // alert("Votes submitted successfully!");
                Swal.fire({
                    icon: "success",
                    title: "Success!",
                    text: "Votes submitted successfully!",
                    confirmButtonColor: "#4CAF50", // Green button
                });
                setSelectedVotes({}); // Clear selected votes
            } else {
                Swal.fire({
                    icon: "error",
                    title: "An error occurred.",
                    text: "An error occurred while submitting votes. Please try again.",
                });
            }
        } catch (error) {
            console.error("Error submitting votes:", error);
            Swal.fire({
                icon: "error",
                title: "Submission Failed",
                text: "An error occurred while submitting votes. Please try again.",
            });
        }
    };
    
    
    
    

  

    
     // âœ… Define columns for DataTable
    const columns = [
        {
            name: "Precinct Number",
            selector: (row) => precinctNumbers.find(p => p.id === row.precinct_num_id)?.precinct_num || "Unknown",
            sortable: true,
        },
        
        {
            name: "Voter Name",
            selector: (row) => row.voter_name,
            cell: (row) => {
                // Find the candidate ID the voter selected
                const selectedCandidateId = selectedVotes[row.id];
        
                // Get the color for the selected candidate
                const voterColor = candidateColorMap[selectedCandidateId] || (votedVoters.includes(row.id) ? "#95a5a6" : "transparent");
        
                return (
                    <div
                        className={`p-2 rounded`}
                        style={{
                            backgroundColor: voterColor, // Assign the candidate's color
                            color: voterColor !== "transparent" ? "white" : "black", // Ensure text contrast
                            fontWeight: "bold",
                        }}
                    >
                        {row.voter_name}
                    </div>
                );
            },
        },
        
        {
            name: "Barangay",
            selector: (row) =>
                barangays.find(
                    b => b.id === 
                        clusteredPrecincts.find(
                            c => c.id === 
                                precinctNumbers.find(p => p.id === row.precinct_num_id)?.clustered_precinct_id
                        )?.barangay_id
                )?.barangay_name || "Unknown",
            sortable: true,
        },

        {
            name: "Candidates",
            cell: (row) => (
                <div className="flex flex-wrap gap-2">
                    {candidates.length > 0 ? (
                        candidates.map((candidate) => {
                            const isSelected = selectedVotes[row.id] === candidate.id;
                            const candidateColor = candidateColorMap[candidate.id] || "#bdc3c7"; // Default gray
                            
                            return (
                                <label key={candidate.id} className="flex items-center gap-1 p-2 rounded"
                                style={{
                                    backgroundColor: candidateColor,
                                    color: "white",
                                    opacity: isSelected ? 1 : 0.5, // Highlight selected, dim others
                                }}>
                                    <input
                                        type="checkbox"
                                        checked={isSelected}
                                        onChange={() => handleCandidateSelection(row.id, candidate.id)}
                                        disabled={selectedVotes[row.id] && !isSelected || votedVoters.includes(row.id)} // Disable other checkboxes if one is selected
                                    />
                                    {candidate.candidate_name}
                                </label>
                            );
                        })
                    ) : (
                        <span className="text-gray-500">No candidates available</span>
                    )}
                </div>
            ),
        },
        
        
    
    ];
     // âœ… Filter voters based on search input
     const filteredVoters = voters.filter((voter) =>
        voter.voter_name.toLowerCase().includes(searchQuery.toLowerCase())
    );
    

    return (
        <div className="container mx-auto p-6">
            <h2 className="text-2xl font-bold mb-4 text-gray-800">Survey Page</h2>

            {/* Filter Form */}
            <div className="bg-white shadow-md rounded-lg p-6 mb-6">
                <h3 className="text-lg font-semibold text-gray-700 mb-4">Filter Voters</h3>
                <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">

                    <select
                    className="border p-2 w-full mb-3"
                    value={regionId}
                    onChange={(e) => {
                        setRegionId(e.target.value);
                        setProvinceId("");
                        setCityId("");
                        setBarangayId("");
                        setClusteredPrecinctId("");
                        setPrecinctNumId("");
                        fetchProvince(e.target.value);
                    }}
                    required
                    >
                    <option value="">Select Province</option>
                    {regions.map((region)=>(
                        <option key={region.id} value={region.id}>{region.region_name}</option>
                    ))}
                    </select>
                    {/*Province*/}
                    <select
                    className="border p-2 w-full mb-3"
                    value={provinceId}
                    onChange={(e) => {
                        setProvinceId(e.target.value);
                        setCityId("");
                        setBarangayId("");
                        setClusteredPrecinctId("");
                        setPrecinctNumId("");
                        fetchCities(e.target.value);
                    }}
                    required
                    >
                    <option value="">Select Region</option>
                    {provinces.map((p)=>(
                        <option key={p.id} value={p.id}>{p.province_name}</option>
                    ))}
                    </select>

                    {/* City Dropdown */}
                    
                            <select
                                className="border p-2 w-full mb-3"
                                value={cityId}
                                onChange={(e) => {
                                    setCityId(e.target.value);
                                    setBarangayId("");
                                    setClusteredPrecinctId("");
                                    setPrecinctNumId("");
                                    fetchBarangays(e.target.value);
                                }}
                                required
                            >
                                <option value="">Select City</option>
                                {cities.map((city) => (
                                    <option key={city.id} value={city.id}>{city.city_name}</option>
                                ))}
                            </select>

                            {/* Barangay Dropdown */}
                            
                            <select
                                className="border p-2 w-full mb-3"
                                value={barangayId}
                                onChange={(e) => {
                                    setBarangayId(e.target.value);
                                    setClusteredPrecinctId("");
                                    setPrecinctNumId("");
                                    fetchClusteredPrecincts(e.target.value); // Fetch data instead of setting directly
                                }}                                
                                required
                                disabled={!cityId} // Disable if no city selected
                            >
                                <option value="">Select Barangay</option>
                                {barangays
                                .filter(b => b.city_id === Number(cityId)) // Show only barangays for selected city
                                .map((b) => (
                                    <option key={b.id} value={b.id}>{b.barangay_name}</option>
                                ))}

                            </select>
                            {/* Clustered Precinct Dropdown */}
                            
                                <select
                                    className="border p-2 w-full mb-3"
                                    value={clusteredPrecinctId}
                                    onChange={(e) => {
                                        setClusteredPrecinctId(e.target.value);
                                        setPrecinctNumId(""); // Reset precinct selection
                                        fetchPrecincts(e.target.value); // Fetch precincts based on clustered precinct
                                    }}
                                    required
                                    disabled={!barangayId} // Disable if no barangay is selected
                                >
                                    <option value="">Select Clustered Precinct</option>
                                    {clusteredPrecincts.map((cp) => (
                                        <option key={cp.id} value={cp.id}>
                                            {cp.clustered_precinct_num}
                                        </option>
                                    ))}
                                </select>



                            {/* Precinct Number Dropdown */}
                        
                            <select
                                className="border p-2 w-full mb-3"
                                value={precinctNumId}
                                onChange={(e) => setPrecinctNumId(e.target.value)}
                                required
                                disabled={!clusteredPrecinctId} // Disable if no barangay selected
                            >
                                <option value="">Select Precinct</option>
                                {precinctNumbers
                                    .filter(p => p.clustered_precinct_id === Number(clusteredPrecinctId)) // Show only precincts for selected barangay
                                    .map((p) => (
                                        <option key={p.id} value={p.id}>{p.precinct_num}</option>
                                    ))}
                            </select>
                            {/* Candidates */}
                            <select
                                className="border p-2 w-full mb-3"
                                value={selectedPosition}
                                onChange={(e) => {
                                    setSelectedPosition(e.target.value);
                                    // fetchCandidates(e.target.value); // Fetch candidates when position changes
                                }}
                            >
                                <option value="">Select Position</option>
                                {positions.map((pos) => (
                                    <option key={pos.id} value={pos.id}>{pos.position_type}</option>
                                ))}
                            </select>
                             {/* Position Dropdown */}
                   

                        

                </div>

                <button 
                    className="bg-blue-600 text-white px-4 py-2 rounded mt-4 hover:bg-blue-700 transition"
                    onClick={fetchVoters}
                >
                    Filter
                </button>
            </div>

            {/* Table Section */}
             {/* âœ… DataTable with Search Bar */}
             <div className="bg-white shadow-md rounded-lg p-6">
                <h3 className="text-lg font-semibold text-black-700 mb-4">Filtered Voters</h3>
                <button
                     className="bg-blue-600 text-white px-4 py-2 rounded mt-4 hover:bg-blue-700 transitionp mb-3"
                    onClick={handleSubmitVotes}
                >
                    Submit Votes
                </button>


                {/* âœ… Search Bar */}
                <input
                    type="text"
                    placeholder="Search voter name..."
                    className="border px-3 py-2 mb-4 w-full rounded-md focus:outline-none focus:ring-2 focus:ring-blue-400"
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                />

                <DataTable
                    columns={columns}
                    data={filteredVoters} // âœ… Use filtered data
                    pagination
                    highlightOnHover
                    striped
                    dense
                />
            </div>
        </div>
    );
};

export default Survey;


/////

import React, { useState, useEffect } from "react";
import axiosInstance from "../../utils/axiosInstance";
import useFilters from "../../utils/useFilters";
import DataTable from "react-data-table-component";
import Swal from "sweetalert2"; // Import SweetAlert2


const Survey = () => {
 
 const {
        regions, positions, candidates,provinces,barangays,cities,clusteredPrecincts,precinctNumbers,
        regionId, setRegionId,
        provinceId, setProvinceId,
        cityId, setCityId,
        barangayId, setBarangayId,
        clusteredPrecinctId, setClusteredPrecinctId,
        precinctNumId, setPrecinctNumId,
        selectedPosition, setSelectedPosition,
    } = useFilters();


    const [voters, setVoters] = useState([]);
    const [searchQuery, setSearchQuery] = useState("");  // âœ… Add this line

    // select candidate and position

    const [selectedVotes, setSelectedVotes] = useState([]);
    const [votedVoters, setVotedVoters] = useState([]);


    const candidateColorMap = {
        1: "#3498db", // Candidate 1 - Blue
        2: "#2ecc71", // Candidate 2 - Green
        3: "#e74c3c", // Candidate 3 - Red
        4: "#f1c40f", // Candidate 4 - Yellow
        5: "#9b59b6", // Candidate 5 - Purple
    };
    

    
    
    const fetchVoters = async () => {
        const filters = {
            region_id: regionId || null,
            province_id: provinceId || null,
            city_id: cityId || null,
            barangay_id: barangayId || null,
            clustered_precinct_id: clusteredPrecinctId || null,
            precinct_num: precinctNumId || null, // Ensure 'precinct_num' matches Laravel API
        };
    
        console.log("Sending request with filters:", filters); // Debugging
    
        try {
            const response = await axiosInstance.get("/voters/filter", { params: filters });
            console.log("Response Data:", response.data); // Debugging
            setVoters(response.data);
        } catch (error) {
            console.error("Error fetching voters:", error.response?.data || error.message);
        }
    };


  
    const handleCandidateSelection = (voterId, candidateId) => {
        setSelectedVotes((prev) => ({
            ...prev,
            [voterId]: prev[voterId] === candidateId ? null : candidateId, // Toggle selection
        }));
    };
    
    

    const handleSubmitVotes = async () => {
        console.log("Submitting votes:", selectedVotes);
    
        if (Object.keys(selectedVotes).length === 0) {
            Swal.fire({
                icon: "warning",
                title: "No Votes Selected",
                text: "Please select a candidate before submitting.",
            });
            return;
        }
    
        const formattedVotes = Object.entries(selectedVotes).map(([voterId, candidateIds]) => ({
            voter_id: voterId,
            candidate_ids: Array.isArray(candidateIds) ? candidateIds : [candidateIds], // Ensure array
        }));
    
        console.log("Formatted Votes:", formattedVotes);
    
        try {
            const response = await axiosInstance.post("/submit-votes", { votes: formattedVotes });
    
            if (response.status === 200) {
                // alert("Votes submitted successfully!");
                Swal.fire({
                    icon: "success",
                    title: "Success!",
                    text: "Votes submitted successfully!",
                    confirmButtonColor: "#4CAF50", // Green button
                });
                setSelectedVotes({}); // Clear selected votes
            } else {
                Swal.fire({
                    icon: "error",
                    title: "An error occurred.",
                    text: "An error occurred while submitting votes. Please try again.",
                });
            }
        } catch (error) {
            console.error("Error submitting votes:", error);
            Swal.fire({
                icon: "error",
                title: "Submission Failed",
                text: "An error occurred while submitting votes. Please try again.",
            });
        }
    };
    
    
    
    

  

    
     // âœ… Define columns for DataTable
    const columns = [
        {
            name: "Precinct Number",
            selector: (row) => precinctNumbers.find(p => p.id === row.precinct_num_id)?.precinct_num || "Unknown",
            sortable: true,
        },
        
        {
            name: "Voter Name",
            selector: (row) => row.voter_name,
            cell: (row) => {
                // Find the candidate ID the voter selected
                const selectedCandidateId = selectedVotes[row.id];
        
                // Get the color for the selected candidate
                const voterColor = candidateColorMap[selectedCandidateId] || (votedVoters.includes(row.id) ? "#95a5a6" : "transparent");
        
                return (
                    <div
                        className={`p-2 rounded`}
                        style={{
                            backgroundColor: voterColor, // Assign the candidate's color
                            color: voterColor !== "transparent" ? "white" : "black", // Ensure text contrast
                            fontWeight: "bold",
                        }}
                    >
                        {row.voter_name}
                    </div>
                );
            },
        },
        
        {
            name: "Barangay",
            selector: (row) =>
                barangays.find(
                    b => b.id === 
                        clusteredPrecincts.find(
                            c => c.id === 
                                precinctNumbers.find(p => p.id === row.precinct_num_id)?.clustered_precinct_id
                        )?.barangay_id
                )?.barangay_name || "Unknown",
            sortable: true,
        },

        {
            name: "Candidates",
            cell: (row) => (
                <div className="flex flex-wrap gap-2">
                    {candidates.length > 0 ? (
                        candidates.map((candidate) => {
                            const isSelected = selectedVotes[row.id] === candidate.id;
                            const candidateColor = candidateColorMap[candidate.id] || "#bdc3c7"; // Default gray
                            
                            return (
                                <label key={candidate.id} className="flex items-center gap-1 p-2 rounded"
                                style={{
                                    backgroundColor: candidateColor,
                                    color: "white",
                                    opacity: isSelected ? 1 : 0.5, // Highlight selected, dim others
                                }}>
                                    <input
                                        type="checkbox"
                                        checked={isSelected}
                                        onChange={() => handleCandidateSelection(row.id, candidate.id)}
                                        disabled={selectedVotes[row.id] && !isSelected || votedVoters.includes(row.id)} // Disable other checkboxes if one is selected
                                    />
                                    {candidate.candidate_name}
                                </label>
                            );
                        })
                    ) : (
                        <span className="text-gray-500">No candidates available</span>
                    )}
                </div>
            ),
        },
        
        
    
    ];
     // âœ… Filter voters based on search input
     const filteredVoters = voters.filter((voter) =>
        voter.voter_name.toLowerCase().includes(searchQuery.toLowerCase())
    );
    

    return (
        <div className="container mx-auto p-6">
            <h2 className="text-2xl font-bold mb-4 text-gray-800">Survey Page</h2>

            {/* Filter Form */}
            <div className="bg-white shadow-md rounded-lg p-6 mb-6">
                <h3 className="text-lg font-semibold text-gray-700 mb-4">Filter Voters</h3>
                <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">

                    <select
                    className="border p-2 w-full mb-3"
                    value={regionId}
                    onChange={(e) => {
                        setRegionId(e.target.value);
                        setProvinceId("");
                        setCityId("");
                        setBarangayId("");
                        setClusteredPrecinctId("");
                        setPrecinctNumId("");
                        fetchProvince(e.target.value);
                    }}
                    required
                    >
                    <option value="">Select Province</option>
                    {regions.map((region)=>(
                        <option key={region.id} value={region.id}>{region.region_name}</option>
                    ))}
                    </select>
                    {/*Province*/}
                    <select
                    className="border p-2 w-full mb-3"
                    value={provinceId}
                    onChange={(e) => {
                        setProvinceId(e.target.value);
                        setCityId("");
                        setBarangayId("");
                        setClusteredPrecinctId("");
                        setPrecinctNumId("");
                        fetchCities(e.target.value);
                    }}
                    required
                    >
                    <option value="">Select Region</option>
                    {provinces.map((p)=>(
                        <option key={p.id} value={p.id}>{p.province_name}</option>
                    ))}
                    </select>

                    {/* City Dropdown */}
                    
                            <select
                                className="border p-2 w-full mb-3"
                                value={cityId}
                                onChange={(e) => {
                                    setCityId(e.target.value);
                                    setBarangayId("");
                                    setClusteredPrecinctId("");
                                    setPrecinctNumId("");
                                    fetchBarangays(e.target.value);
                                }}
                                required
                            >
                                <option value="">Select City</option>
                                {cities.map((city) => (
                                    <option key={city.id} value={city.id}>{city.city_name}</option>
                                ))}
                            </select>

                            {/* Barangay Dropdown */}
                            
                            <select
                                className="border p-2 w-full mb-3"
                                value={barangayId}
                                onChange={(e) => {
                                    setBarangayId(e.target.value);
                                    setClusteredPrecinctId("");
                                    setPrecinctNumId("");
                                    fetchClusteredPrecincts(e.target.value); // Fetch data instead of setting directly
                                }}                                
                                required
                                disabled={!cityId} // Disable if no city selected
                            >
                                <option value="">Select Barangay</option>
                                {barangays
                                .filter(b => b.city_id === Number(cityId)) // Show only barangays for selected city
                                .map((b) => (
                                    <option key={b.id} value={b.id}>{b.barangay_name}</option>
                                ))}

                            </select>
                            {/* Clustered Precinct Dropdown */}
                            
                                <select
                                    className="border p-2 w-full mb-3"
                                    value={clusteredPrecinctId}
                                    onChange={(e) => {
                                        setClusteredPrecinctId(e.target.value);
                                        setPrecinctNumId(""); // Reset precinct selection
                                        fetchPrecincts(e.target.value); // Fetch precincts based on clustered precinct
                                    }}
                                    required
                                    disabled={!barangayId} // Disable if no barangay is selected
                                >
                                    <option value="">Select Clustered Precinct</option>
                                    {clusteredPrecincts.map((cp) => (
                                        <option key={cp.id} value={cp.id}>
                                            {cp.clustered_precinct_num}
                                        </option>
                                    ))}
                                </select>



                            {/* Precinct Number Dropdown */}
                        
                            <select
                                className="border p-2 w-full mb-3"
                                value={precinctNumId}
                                onChange={(e) => setPrecinctNumId(e.target.value)}
                                required
                                disabled={!clusteredPrecinctId} // Disable if no barangay selected
                            >
                                <option value="">Select Precinct</option>
                                {precinctNumbers
                                    .filter(p => p.clustered_precinct_id === Number(clusteredPrecinctId)) // Show only precincts for selected barangay
                                    .map((p) => (
                                        <option key={p.id} value={p.id}>{p.precinct_num}</option>
                                    ))}
                            </select>
                            {/* Candidates */}
                            <select
                                className="border p-2 w-full mb-3"
                                value={selectedPosition}
                                onChange={(e) => {
                                    setSelectedPosition(e.target.value);
                                    // fetchCandidates(e.target.value); // Fetch candidates when position changes
                                }}
                            >
                                <option value="">Select Position</option>
                                {positions.map((pos) => (
                                    <option key={pos.id} value={pos.id}>{pos.position_type}</option>
                                ))}
                            </select>
                             {/* Position Dropdown */}
                   

                        

                </div>

                <button 
                    className="bg-blue-600 text-white px-4 py-2 rounded mt-4 hover:bg-blue-700 transition"
                    onClick={fetchVoters}
                >
                    Filter
                </button>
            </div>

            {/* Table Section */}
             {/* âœ… DataTable with Search Bar */}
             <div className="bg-white shadow-md rounded-lg p-6">
                <h3 className="text-lg font-semibold text-black-700 mb-4">Filtered Voters</h3>
                <button
                     className="bg-blue-600 text-white px-4 py-2 rounded mt-4 hover:bg-blue-700 transitionp mb-3"
                    onClick={handleSubmitVotes}
                >
                    Submit Votes
                </button>


                {/* âœ… Search Bar */}
                <input
                    type="text"
                    placeholder="Search voter name..."
                    className="border px-3 py-2 mb-4 w-full rounded-md focus:outline-none focus:ring-2 focus:ring-blue-400"
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                />

                <DataTable
                    columns={columns}
                    data={filteredVoters} // âœ… Use filtered data
                    pagination
                    highlightOnHover
                    striped
                    dense
                />
            </div>
        </div>
    );
};

export default Survey;




// import React, { useState, useEffect } from 'react';
// import axiosInstance from "../../utils/axiosInstance";
// import { Bar } from 'react-chartjs-2';
// import {
//   Chart as ChartJS,
//   CategoryScale,
//   LinearScale,
//   BarElement,
//   Title,
//   Tooltip,
//   Legend,
// } from 'chart.js';

// // Register ChartJS components
// ChartJS.register(
//   CategoryScale,
//   LinearScale,
//   BarElement,
//   Title,
//   Tooltip,
//   Legend
// );


// const VoteResult = () => {

  
//   // State for filters
//   const [filters, setFilters] = useState({
//     region: '',
//     province: '',
//     city: '',
//     barangay: '',
//     clusteredPrecinct: '',
//     precinctNumber: ''
//   });

//   const [stats, setStats] = useState({ total_voters: 0 });
//   const [options, setOptions] = useState({
//     regions: [],
//     provinces: [],
//     cities: [],
//     barangays: [],
//     clusteredPrecincts: [],
//     precinctNumbers: []
//   });

//   const [results, setResults] = useState([]);
//   const [candidateTotals, setCandidateTotals] = useState([]);
//   const [chartData, setChartData] = useState(null);
//   const [isLoading, setIsLoading] = useState(true);

//   // Fetch stats on initial load
//   useEffect(() => {
//     const fetchStats = async () => {
//         try {
//             const response = await axiosInstance.get("/dashboard-stats", {
//                 headers: { Authorization: `Bearer ${localStorage.getItem("token")}` },
//             });
//             setStats(response.data);
//         } catch (error) {
//             console.error("Error fetching stats:", error);
//         }
//     };
//     fetchStats();
//   }, []);

//   // Fetch region options on mount
//   useEffect(() => {
//     const fetchRegions = async () => {
//       try {
//         const regionsRes = await axiosInstance.get('/region');
//         setOptions(prev => ({ ...prev, regions: regionsRes.data }));
//       } catch (error) {
//         console.error("Error fetching regions:", error);
//       }
//     };
//     fetchRegions();
//   }, []);

//   // Handle filter changes and reset downstream filters
//   const handleFilterChange = async (filterType, value) => {
//     const newFilters = { ...filters, [filterType]: value };

//     // Reset downstream filters
//     const resetFilters = {
//       region: ['province', 'city', 'barangay', 'clusteredPrecinct', 'precinctNumber'],
//       province: ['city', 'barangay', 'clusteredPrecinct', 'precinctNumber'],
//       city: ['barangay', 'clusteredPrecinct', 'precinctNumber'],
//       barangay: ['clusteredPrecinct', 'precinctNumber'],
//       clusteredPrecinct: ['precinctNumber']
//     };

//     if (resetFilters[filterType]) {
//       resetFilters[filterType].forEach(f => newFilters[f] = '');
//     }

//     setFilters(newFilters);

//     // Fetch options for the next level filter
//     const endpoints = {
//       region: '/provinces',
//       province: '/cities',
//       city: '/barangays',
//       barangay: '/clustered-precincts',
//       clusteredPrecinct: '/precinct-numbers'
//     };

//     if (endpoints[filterType] && value) {
//       try {
//         const res = await axiosInstance.get(`${endpoints[filterType]}?parent=${value}`);
//         setOptions(prev => ({
//           ...prev,
//           [`${filterType}s`]: res.data
//         }));
//       } catch (error) {
//         console.error(`Error fetching ${filterType} options:`, error);
//       }
//     }

//     // Fetch results after updating the filter
//     fetchFilteredResults(newFilters); // Call fetchFilteredResults to update the results
//   };

//   // Fetch filtered results based on selected filters
//   const fetchFilteredResults = async (currentFilters) => {
//     setIsLoading(true);  // Start loading
//     try {
//       // Build query params from non-empty filters
//       const params = {};
//       Object.entries(currentFilters).forEach(([key, value]) => {
//         if (value) params[key] = value;
//       });

//       // Only fetch results if there are selected filters
//       if (Object.keys(params).length > 0) {
//         const res = await axiosInstance.get('/results', { params });
//         setResults(res.data);

//         const candidateData = res.data.total_votes_per_candidate || [];
//         setCandidateTotals(candidateData);

//         const labels = candidateData.map(c => c.candidate_name);
//         const data = candidateData.map(c => c.total_votes);

//         setChartData({
//           labels,
//           datasets: [{
//             label: "Total Votes",
//             data,
//             backgroundColor: labels.map(() => `#${Math.floor(Math.random() * 16777215).toString(16).padStart(6, "0")}`)
//           }],
//         });
//       } else {
//         // If no filter is selected, reset the results
//         setResults([]);
//       }
//     } catch (error) {
//       console.error('Error fetching filtered results:', error);
//     } finally {
//       console.log("Setting isLoading to false");
//       setIsLoading(false);  // Stop loading
//     }
//   };

//   // Calculate total votes
//   const totalVotes = candidateTotals.reduce((sum, candidate) => sum + candidate.total_votes, 0);


  

//   // if (isLoading) {
//   //   return (
//   //     <div className="flex justify-center items-center h-screen">
//   //       <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
//   //     </div>
//   //   );
//   // }

//   return (
//     <div className="container mx-auto px-4 py-8">
//       <h1 className="text-3xl font-bold text-gray-800 mb-6">Vote Results Dashboard</h1>
      
//       {/* Filter Controls */}
//       <div className="bg-white p-6 rounded-lg shadow-md mb-8">
//         <h2 className="text-xl font-semibold mb-4">Filters</h2>
//         <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
//           <div className="space-y-1">
//             <label className="block text-sm font-medium text-gray-700">Region</label>
//             <select
//               className="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
//               value={filters.region}
//               onChange={(e) => handleFilterChange('region', e.target.value)}
//             >
//               <option value="">All Regions</option>
//               {options.regions.map(region => (
//                 <option key={region.id} value={region.id}>{region.region_name}</option>
//               ))}
//             </select>
//           </div>

//           <div className="space-y-1">
//             <label className="block text-sm font-medium text-gray-700">Province</label>
//             <select
//               className="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50"
//               value={filters.province}
//               onChange={(e) => handleFilterChange('province', e.target.value)}
//               disabled={!filters.region}
//             >
//               <option value="">All Provinces</option>
//               {options.provinces.map(province => (
//                 <option key={province.id} value={province.id}>{province.province_name}</option>
//               ))}
//             </select>
//           </div>

//           <div className="space-y-1">
//             <label className="block text-sm font-medium text-gray-700">City/Municipality</label>
//             <select
//               className="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50"
//               value={filters.city}
//               onChange={(e) => handleFilterChange('city', e.target.value)}
//               disabled={!filters.province}
//             >
//               <option value="">All Cities</option>
//               {options.cities.map(city => (
//                 <option key={city.id} value={city.id}>{city.city_name}</option>
//               ))}
//             </select>
//           </div>

//           <div className="space-y-1">
//             <label className="block text-sm font-medium text-gray-700">Barangay</label>
//             <select
//               className="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50"
//               value={filters.barangay}
//               onChange={(e) => handleFilterChange('barangay', e.target.value)}
//               disabled={!filters.city}
//             >
//               <option value="">All Barangays</option>
//               {options.barangays.map(barangay => (
//                 <option key={barangay.id} value={barangay.id}>{barangay.barangay_name}</option>
//               ))}
//             </select>
//           </div>

//           <div className="space-y-1">
//             <label className="block text-sm font-medium text-gray-700">Clustered Precinct</label>
//             <select
//               className="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50"
//               value={filters.clusteredPrecinct}
//               onChange={(e) => handleFilterChange('clusteredPrecinct', e.target.value)}
//               disabled={!filters.barangay}
//             >
//               <option value="">All Precincts</option>
//               {options.clusteredPrecincts.map(precinct => (
//                 <option key={precinct.id} value={precinct.id}>{precinct.clustered_precinct_num}</option>
//               ))}
//             </select>
//           </div>

//           <div className="space-y-1">
//             <label className="block text-sm font-medium text-gray-700">Precinct Number</label>
//             <select
//               className="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50"
//               value={filters.precinctNumber}
//               onChange={(e) => handleFilterChange('precinctNumber', e.target.value)}
//               disabled={!filters.clusteredPrecinct}
//             >
//               <option value="">All Numbers</option>
//               {options.precinctNumbers.map(number => (
//                 <option key={number.id} value={number.id}>{number.precinct_num}</option>
//               ))}
//             </select>
//           </div>
//         </div>
//       </div>

//      {/* Candidate Totals Display */}
//      <div className="bg-white p-6 rounded-lg shadow-md mb-8">
//         <h2 className="text-xl font-semibold mb-4">Candidate Vote Totals</h2>
//         <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
//           {candidateTotals.map((candidate, index) => (
//             <div key={index} className="p-4 bg-gray-100 rounded-lg shadow-sm">
//               <h3 className="text-lg font-semibold">{candidate.candidate_name}</h3>
//               <p className="text-gray-600">{candidate.total_votes} votes</p>
//               <p className="text-sm text-gray-500">
//                 {totalVotes > 0 ? ((candidate.total_votes / totalVotes) * 100).toFixed(2) : 0}%
//               </p>
//             </div>
//           ))}
//         </div>
//       </div>

//       {/* Results Chart */}
//       <div className="bg-white p-6 rounded-lg shadow-md mb-8">
//         <h2 className="text-xl font-semibold mb-4">Vote Distribution</h2>
//         {chartData && (
//           <div className="h-96">
//             <Bar
//               data={chartData}
//               options={{
//                 responsive: true,
//                 maintainAspectRatio: false,
//                 plugins: {
//                   title: {
//                     display: true,
//                     text: 'Vote Totals by Candidate',
//                   },
//                 },
//               }}
//             />
//           </div>
//         )}
//       </div>

//       {/* Results Table */}
//       <div className="bg-white p-6 rounded-lg shadow-md">
//         <h2 className="text-xl font-semibold mb-4">Detailed Results</h2>
//         <div className="overflow-x-auto">
//           <table className="min-w-full divide-y divide-gray-200">
//             <thead className="bg-gray-50">
//               <tr>
//                 <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Region</th>
//                 <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Precinct</th>
//                 <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Candidate Names</th>
//                 <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Total Votes</th>
//                 <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Percentage {stats.total_voters}</th>
//               </tr>
//             </thead>
//             <tbody className="bg-white divide-y divide-gray-200">
//               {candidateTotals.map((candidate, index) => (
//                 <tr key={index} className="hover:bg-gray-50">
//                   <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{candidate.region}</td>
//                   <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{candidate.precinctNumber}</td>
                 
//                   {Object.keys(candidate || {}).map(key => (
//                       <td key={key} className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
//                         {candidate[key] || 0}
//                       </td>
//                     ))}
//                   <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
//                     {totalVotes > 0 ? ((candidate.total_votes / stats.total_voters) * 100).toFixed(2) : 0}%
                    
//                   </td>
//                 </tr>
//               ))}
//             </tbody>
//           </table>
//         </div>
//       </div>
//     </div>
//   );
// };

// export default VoteResult;


  // Fetch filtered results based on selected filters
  // const fetchFilteredResults = async () => {
  //   setIsLoading(true);
  //   try {
  //     const params = {
  //       region_id: regionId,
  //       province_id: provinceId,
  //       city_id: cityId,
  //       barangay_id: barangayId,
  //       clustered_precinct_id: clusteredPrecinctId,
  //       precinct_num_id: precinctNumId,
  //       position_id: selectedPosition,
  //     };

  //     // Remove any filters with empty values to avoid sending them in the request
  //     Object.keys(params).forEach(key => {
  //       if (!params[key]) delete params[key];
  //     });

  //     const res = await axiosInstance.get('/results', { params });
  //     setResults(res.data);

  //     const candidateData = res.data.total_votes_per_candidate || [];
  //     setCandidateTotals(candidateData);

  //     const labels = candidateData.map(c => c.candidate_name);
  //     const data = candidateData.map(c => c.total_votes);

  //     setChartData({
  //       labels,
  //       datasets: [{
  //         label: "Total Votes",
  //         data,
  //         backgroundColor: labels.map(() => `#${Math.floor(Math.random() * 16777215).toString(16).padStart(6, "0")}`)
  //       }],
  //     });
  //   } catch (error) {
  //     console.error('Error fetching filtered results:', error);
  //   } finally {
  //     setIsLoading(false);
  //   }
  // };
  
  // useEffect(() => {
  //   fetchFilteredResults(); // Call the function to fetch results whenever the filters change
  // }, [regionId, provinceId, cityId, barangayId, clusteredPrecinctId, precinctNumId, selectedPosition]); // Include all the filters in the dependency array

  //       const candidateData = [];
// Object.keys(res.data.votes).forEach(position => {
//   res.data.votes[position].forEach((candidate, index) => {
//     candidateData.push({
//       id: index + 1,  // Using index + 1 as a fallback ID
//       candidate_name: candidate.candidate_name,
//       total_votes: candidate.total_votes
//     });
//   });
// });